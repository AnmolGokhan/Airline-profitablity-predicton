# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s2Aw5SzFo_OhgAjAa-fEZmF3DodbJMSc
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from xgboost import XGBRegressor
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression

# Load data
df = pd.read_csv("/content/Aviation_KPIs_Dataset.xlsx - Sheet1.csv")

# Remove problematic features
X = df.drop(columns=[
    "Profit (USD)", "Flight Number",
    "Scheduled Departure Time", "Actual Departure Time",
    "Revenue (USD)"
])
y = df["Profit (USD)"]

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Remove outliers on training data only
Q1 = X_train.quantile(0.25)
Q3 = X_train.quantile(0.75)
IQR = Q3 - Q1
train_mask = ~((X_train < (Q1 - 1.5 * IQR)) | (X_train > (Q3 + 1.5 * IQR))).any(axis=1)
X_train = X_train[train_mask]
y_train = y_train[train_mask]

# Scale features
scaler = StandardScaler()
X_train_scaled = pd.DataFrame(
    scaler.fit_transform(X_train),
    columns=X_train.columns,
    index=X_train.index
)
X_test_scaled = pd.DataFrame(
    scaler.transform(X_test),
    columns=X_test.columns,
    index=X_test.index
)

# Scale target
y_scaler = StandardScaler()
y_train_scaled = y_scaler.fit_transform(y_train.values.reshape(-1, 1))
y_test_scaled = y_scaler.transform(y_test.values.reshape(-1, 1))

# --- Model Training ---
def train_evaluate_model(model, model_name):
    # For tree models using scaled target
    if model_name in ["XGBoost", "GradientBoosting"]:
        # Split validation set
        X_train_sub, X_val, y_train_sub, y_val = train_test_split(
            X_train_scaled, y_train_scaled,
            test_size=0.1,
            random_state=42
        )
        model.fit(X_train_sub, y_train_sub, eval_set=[(X_val, y_val)], verbose= True)
        y_pred_scaled = model.predict(X_test_scaled)
    else:
        model.fit(X_train_scaled, y_train_scaled)
        y_pred_scaled = model.predict(X_test_scaled)

    # Inverse-transform predictions
    y_pred = y_scaler.inverse_transform(y_pred_scaled.reshape(-1, 1))

    # Metrics
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f"{model_name} - MAE: {mae:.2f}, RÂ²: {r2:.4f}")

# Linear Regression
train_evaluate_model(LinearRegression(), "Linear Regression")

# Decision Tree
train_evaluate_model(
    DecisionTreeRegressor(max_depth=5, min_samples_leaf=10, random_state=42),
    "Decision Tree"
)

# Random Forest
train_evaluate_model(
    RandomForestRegressor(n_estimators=100, max_depth=10, min_samples_split=20, random_state=42),
    "Random Forest"
)

# Gradient Boosting
train_evaluate_model(
    GradientBoostingRegressor(
        n_estimators=200, learning_rate=0.05, max_depth=4,
        min_samples_split=20, subsample=0.8, n_iter_no_change=5, random_state=42
    ),
    "Gradient Boosting"
)

# XGBoost
train_evaluate_model(
    XGBRegressor(
        n_estimators=1000, learning_rate=0.05, max_depth=5,
        gamma=0.5, subsample=0.8, reg_lambda=2,
        early_stopping_rounds=10, random_state=42
    ),
    "XGBoost"
)

# Machine learning file 
https://colab.research.google.com/drive/1s2Aw5SzFo_OhgAjAa-fEZmF3DodbJMSc?usp=sharing
